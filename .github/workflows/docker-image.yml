name: Docker Image CI

on:
  push:
    tags:
      - 'v*.*.*'
      - 'beta-*'
  workflow_dispatch: # 手动触发

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/openlist

# 添加权限控制
permissions:
  contents: read
  packages: write

jobs:
  build:
    # 添加权限检查，只在 dev-compression 分支或标签推送时运行
    if: github.actor == 'AkenClub' && (github.ref == 'refs/heads/dev-compression' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置 QEMU 以支持跨平台构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # Buildx 进行多平台构建
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 检查是否为beta版本
      - name: Check build type
        id: check-build-type
        run: |
          # 检查是否为标签推送
          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            # 检查是否为beta标签
            if [[ ${{ github.ref }} == refs/tags/beta-* ]]; then
              echo "build_type=beta" >> $GITHUB_OUTPUT
              echo "beta_date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
            else
              echo "build_type=release" >> $GITHUB_OUTPUT
            fi
          # 检查是否为dev-compression分支推送
          elif [[ ${{ github.ref }} == refs/heads/dev-compression ]]; then
            echo "build_type=beta" >> $GITHUB_OUTPUT
            echo "beta_date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          else
            echo "build_type=skip" >> $GITHUB_OUTPUT
          fi

      # 正式版本的元数据提取
      - name: Extract Docker metadata for release
        id: meta-release
        if: steps.check-build-type.outputs.build_type == 'release'
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest

      # Beta版本的元数据提取
      - name: Extract Docker metadata for beta
        id: meta-beta
        if: steps.check-build-type.outputs.build_type == 'beta'
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=beta
            type=raw,value=beta-${{ steps.check-build-type.outputs.beta_date }}

      # 构建并推送正式版镜像
      - name: Build and push release Docker image
        if: steps.check-build-type.outputs.build_type == 'release'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta-release.outputs.tags }}
          labels: ${{ steps.meta-release.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 构建并推送beta版镜像
      - name: Build and push beta Docker image
        if: steps.check-build-type.outputs.build_type == 'beta'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta-beta.outputs.tags }}
          labels: ${{ steps.meta-beta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
